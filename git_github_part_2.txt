Git + Github Part 2

Let's continue from our previous video (section) to talk about a more advanced workflow and Git and GitHub.

Now up to this point, both Marcy and I (smanwarulislam (S. M. Anwarul Islam (Raju))) have just been working on it over here Branch: master (“main”).
By default, GitHub names the default branch “main” in any new repository.
What does that mean?
Well it says Branches but I only see the main (default) here
and you might have noticed one issue with the way that we were doing things.
That is if it's my first day on the job and I just changed the title.
But maybe we didn't even want that change.
Maybe that breaks our branding or breaks our app.
But I was able to do it so easily to change it into main.
Maybe Marcy didn't even know that I'd added that change and that's a big problem right?
You don't want to put things into what we call production into what the user sees.
If it's going to break our website if you're a big company like Facebook (Meta) that could mean millions of dollars in lost revenue
even if you have a bug that lasts a few hours.
So I'm going to show you a more realistic workflow that you'll have.
And that is with branching.
Let me show you what I mean.

I have over here a visual (git_github_part_2.png) of what Git is really really good at.
Up until now, we've been working on what we call master (main).
That is the master (main) branch.
Think of the master (main) branch as the authority.
This is the right way that our app or our website should look.

And up until now when I added the cool background title Well I went from a Background Generator to Cool Generator
and then when Marcy changed to capitalized letters (COOL). Then we went here (First to third).
and we just went in a linear fashion from one end to the other to the other to the other.
But like I said that is a bit of a problem.
So a better thing to do is what we call branching.
If I wanted to change the title I will create a branch and just call that Little Feature for example.
And I just work on that branch on my own without affecting the master (main) branch what the user sees.
Only when it's finished when Marcy has reviewed it when we have tested it and everybody on the team is OK. Then we bring it back into master (main).
and you can see over here with the Big Feature you can keep going for a long time on your own branch
and only when you're done do what we call merge into master (main).
I'm going to show you how that works today.

And remember our example
we have Marcy's computer here with all the files
and we have my (smanwarulislam (S. M. Anwarul Islam (Raju))) computer here with all the files.
We both have our workstations set up
and now you see what master (main -> origin) in my terminal means I'll show you in the notes afterward how you can have this set up so it tells you what branch you're on.
But we can see that we're both on master (main -> origin).
That's my (smanwarulislam (S. M. Anwarul Islam (Raju))) computer and Marcy's computer is also in master (main -> origin).

We want to make sure that we're both up to date with the latest GitHub.
So Marcy's going to do
git pull
G:\Marcy\GitHub\repositories\git-github-background-generator (main -> origin)
λ git pull
Already up to date.

and I'm (smanwarulislam (S. M. Anwarul Islam (Raju))) also going to do
git pull
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (main -> origin)
λ git pull
Already up to date.

And let's say that I'm now working on a new feature
and because it's a better workflow not to work on the master (main).
And this is a good tip generally don't work on master (main), always branch off.

If I do
git branch
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (main -> origin)
λ git branch
* main

they'll show me that well I only have one branch and that is the master (main)
but we can add to it we can say
git branch new or littlefeature
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (main -> origin)
λ git branch littlefeature

and now if I do
git branch
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (main -> origin)
λ git branch
  littlefeature
* main

I see that I have littlefeature but the master (main) is highlighted because I'm currently on master (main).
So the way I would go to the littlefeature branch I'll say
git checkout littlefeature
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (main -> origin)
λ git checkout littlefeature
Switched to branch 'littlefeature'

G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ

and there you go.
Switched to branch 'littlefeature'
And now I'm on a littlefeature branch so what I've done is I've branched off of master (main) and now created littlefeature.

Let's create a bit of a change.
I'm going to say in the littlefeature we're going to change the Current CSS Background title to say This is the background
I'm going to save.

And again I do my simple workflow that we did in the last video (section)
git status
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ git status
On branch littlefeature
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        git_github_part_2.png
        git_github_part_2.txt

no changes added to commit (use "git add" and/or "git commit -a")

I see that.
Yeah.
We have the index.html changed.

So now that we've made this change let's do
git add
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ git add .

and again just
git status
to make sure everything went through.
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ git status
On branch littlefeature
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   git_github_part_2.png
        new file:   git_github_part_2.txt
        modified:   index.html

Yeah, we're ready to commit index.html.
So we'll
git commit
message will be
changing text (h2 tag).
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ git commit -m "changing text (h2 tag)"

Perfect.

And now again in order to let GitHub know all of the changes we need to do a
git push
G:\smanwarulislam\GitHub\repositories\git-github-background-generator (littlefeature -> origin)
λ git push

Let's go to GitHub and see what happened.
We see that now we have this yellow bar that just showed up and says "Your recently pushed branches".
So if I click on this green button here "Compare & pull request"
It shows me what changes I have which is I've changed the text (changing text (h2 tag))
and here I can let Marcy know by saying
"Marcy, I've changed the text. What do you think?"
And I click on Create pull request
and now I have my PR (pull request)
and you see here how it says Merge pull request.
Well if we go back to our diagram (git_github_part_2.png)
I've created this littlefeature and now I'm saying hey Marcy I've just done this new change.
What do you think?
Is it OK for me to merge it into the master (main)?
And what will happen here most likely as Marcy will come to see this pull request.
You can see (GitHub) that we're on the Pull requests tabs.
So she'll (Marcy) be able to see them and see Oh smanwarulislam (S. M. Anwarul Islam (Raju)) just did this change.
She'll look through the changes
and she'll say Hmm well if she like says she can be like
looks good
she can click on Start a review
and you know what she really likes it so she's just going to approve
Now Marcy or I usually don't want to merge your own pull request somebody on the team does it can now just say Merge pull request
Confirm merge
and there you go
some teams like deleting the branch (Delete branch) afterward so you can just click delete here (Delete branch).
If I go back to the Code (<> Code tab), well, I don't have the branches anymore because I just deleted it.
But in my master (main), if I go to index.html I see This is the background (h2 tag).

So now Marcy can go to her project and say
git pull
G:\Marcy\GitHub\repositories\git-github-background-generator (main -> origin)
λ git pull

and again she has the latest update.